<div class="bb-page">

    <Sidebar @ref="sidebar"
             IconName="IconName.BootstrapFill"
             Title="Blazor Bootstrap"
             BadgeText="v1.3.1"
             DataProvider="SidebarDataProvider" />

    <main>
        <div class="bb-top-row px-4 d-flex justify-content-between">
            <Icon Name="IconName.List" role="button" @onclick="ToggleSidebar" />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <div class="py-2">Page content goes here</div>
        </article>
    </main>

</div>

@code {
    Sidebar sidebar = default!;
    private IEnumerable<NavItem> navItems = default!;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }


    private IEnumerable<NavItem> GetNavItems()
    {
        yield return new NavItem
        {
            Href = "/getting-started",
            IconName = IconName.HouseDoorFill,
            Text = "Getting Started"
        };

        yield return new NavItem
        {
            IconName = IconName.LayoutSidebarInset,
            Text = "Content",
            IconColor = IconColor.Primary,
            ChildItems = new List<NavItem>
            {
                new NavItem {  Href = "/icons", IconName = IconName.PersonSquare, Text = "Icons" },
            }
        };

        yield return new NavItem
        {
            IconName = IconName.ExclamationTriangleFill,
            Text = "Components",
            IconColor = IconColor.Success,
            ChildItems = new List<NavItem>
            {
                new NavItem { Href = "/alerts", IconName = IconName.CheckCircleFill, Text = "Alerts" },
                new NavItem { Href = "/breadcrumb", IconName = IconName.SegmentedNav, Text = "Breadcrumb" },
                new NavItem { Href = "/sidebar", IconName = IconName.LayoutSidebarInset, Text = "Sidebar" },        
            }
        };

        yield return new NavItem
        {
            IconName = IconName.WindowPlus,
            Text = "Forms",
            IconColor = IconColor.Danger,
            ChildItems = new List<NavItem>
            {
                new NavItem { Href = "/autocomplete", IconName = IconName.InputCursorText, Text = "Auto Complete" },
                new NavItem { Href = "/currency-input", IconName = IconName.CurrencyDollar, Text = "Currency Input" },
                new NavItem { Href = "/number-input", IconName = IconName.InputCursor, Text = "Number Input" },
                new NavItem { Href = "/switch", IconName = IconName.ToggleOn, Text = "Switch" },        
            }
        };
    }

    private void ToggleSidebar() => sidebar.ToggleSidebar();
}
